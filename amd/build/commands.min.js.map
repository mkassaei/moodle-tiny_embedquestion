{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_embedquestion plugin.\n *\n * @module      tiny_embedquestion/commands\n * @copyright   2024 The Open University\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    buttonName,\n    icon\n} from './common';\nimport {DialogManager} from \"./dialogue_manager\";\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonText,\n        buttonImage,\n    ] = await Promise.all([\n        getString('pluginname', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return async(editor) => {\n        registerManagerCommand(editor, buttonText, buttonImage);\n    };\n};\n\n/**\n * Registers a custom command for embed question in the editor.\n *\n * @async\n * @param {Object} editor - The editor instance.\n * @param {string} buttonText - The text to display as a tooltip for the button.\n * @param {Object} buttonImage - The image to be displayed on the button.\n */\nconst registerManagerCommand = async(editor, buttonText, buttonImage) => {\n    const handleDialogManager = async() => {\n        const dialog = new DialogManager(editor);\n        await dialog.displayDialogue();\n    };\n\n    editor.ui.registry.addIcon(icon, buttonImage.html);\n\n    editor.ui.registry.addMenuItem(buttonName, {\n        icon: icon,\n        text: buttonText,\n        onAction: async() => {\n            await handleDialogManager();\n        }\n    });\n};\n"],"names":["async","buttonText","buttonImage","Promise","all","component","registerManagerCommand","editor","ui","registry","addIcon","icon","html","addMenuItem","buttonName","text","onAction","dialog","DialogManager","displayDialogue","handleDialogManager"],"mappings":"6QAwCwBA,gBAEhBC,WACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,aAAcC,oBACxB,yBAAe,OAAQA,4BAGpBL,MAAAA,SACHM,uBAAuBC,OAAQN,WAAYC,qBAY7CI,uBAAyBN,MAAMO,OAAQN,WAAYC,eAMrDK,OAAOC,GAAGC,SAASC,QAAQC,aAAMT,YAAYU,MAE7CL,OAAOC,GAAGC,SAASI,YAAYC,mBAAY,CACvCH,KAAMA,aACNI,KAAMd,WACNe,SAAUhB,eAVcA,iBAClBiB,OAAS,IAAIC,gCAAcX,cAC3BU,OAAOE,mBASHC"}